// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: messages.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "emdr_messages";

export interface WebSocketMessage {
  /** Client to Server messages */
  createSessionRequest?: CreateSessionRequest | undefined;
  joinSessionRequest?:
    | JoinSessionRequest
    | undefined;
  /** Server to Client messages */
  createSessionResponse?: CreateSessionResponse | undefined;
  joinSessionResponse?:
    | JoinSessionResponse
    | undefined;
  /** Shared */
  params?: Params | undefined;
}

export interface CreateSessionRequest {
}

export interface JoinSessionRequest {
  sessionUrl: string;
}

export interface CreateSessionResponse {
  accepted: boolean;
  sessionUrl: string;
}

export interface JoinSessionResponse {
  accepted: boolean;
}

export interface Params {
  size: number;
  speed: number;
  color: string;
}

function createBaseWebSocketMessage(): WebSocketMessage {
  return {
    createSessionRequest: undefined,
    joinSessionRequest: undefined,
    createSessionResponse: undefined,
    joinSessionResponse: undefined,
    params: undefined,
  };
}

export const WebSocketMessage: MessageFns<WebSocketMessage> = {
  encode(message: WebSocketMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createSessionRequest !== undefined) {
      CreateSessionRequest.encode(message.createSessionRequest, writer.uint32(10).fork()).join();
    }
    if (message.joinSessionRequest !== undefined) {
      JoinSessionRequest.encode(message.joinSessionRequest, writer.uint32(18).fork()).join();
    }
    if (message.createSessionResponse !== undefined) {
      CreateSessionResponse.encode(message.createSessionResponse, writer.uint32(26).fork()).join();
    }
    if (message.joinSessionResponse !== undefined) {
      JoinSessionResponse.encode(message.joinSessionResponse, writer.uint32(34).fork()).join();
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebSocketMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebSocketMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.createSessionRequest = CreateSessionRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.joinSessionRequest = JoinSessionRequest.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createSessionResponse = CreateSessionResponse.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.joinSessionResponse = JoinSessionResponse.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebSocketMessage {
    return {
      createSessionRequest: isSet(object.createSessionRequest)
        ? CreateSessionRequest.fromJSON(object.createSessionRequest)
        : undefined,
      joinSessionRequest: isSet(object.joinSessionRequest)
        ? JoinSessionRequest.fromJSON(object.joinSessionRequest)
        : undefined,
      createSessionResponse: isSet(object.createSessionResponse)
        ? CreateSessionResponse.fromJSON(object.createSessionResponse)
        : undefined,
      joinSessionResponse: isSet(object.joinSessionResponse)
        ? JoinSessionResponse.fromJSON(object.joinSessionResponse)
        : undefined,
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: WebSocketMessage): unknown {
    const obj: any = {};
    if (message.createSessionRequest !== undefined) {
      obj.createSessionRequest = CreateSessionRequest.toJSON(message.createSessionRequest);
    }
    if (message.joinSessionRequest !== undefined) {
      obj.joinSessionRequest = JoinSessionRequest.toJSON(message.joinSessionRequest);
    }
    if (message.createSessionResponse !== undefined) {
      obj.createSessionResponse = CreateSessionResponse.toJSON(message.createSessionResponse);
    }
    if (message.joinSessionResponse !== undefined) {
      obj.joinSessionResponse = JoinSessionResponse.toJSON(message.joinSessionResponse);
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebSocketMessage>, I>>(base?: I): WebSocketMessage {
    return WebSocketMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebSocketMessage>, I>>(object: I): WebSocketMessage {
    const message = createBaseWebSocketMessage();
    message.createSessionRequest = (object.createSessionRequest !== undefined && object.createSessionRequest !== null)
      ? CreateSessionRequest.fromPartial(object.createSessionRequest)
      : undefined;
    message.joinSessionRequest = (object.joinSessionRequest !== undefined && object.joinSessionRequest !== null)
      ? JoinSessionRequest.fromPartial(object.joinSessionRequest)
      : undefined;
    message.createSessionResponse =
      (object.createSessionResponse !== undefined && object.createSessionResponse !== null)
        ? CreateSessionResponse.fromPartial(object.createSessionResponse)
        : undefined;
    message.joinSessionResponse = (object.joinSessionResponse !== undefined && object.joinSessionResponse !== null)
      ? JoinSessionResponse.fromPartial(object.joinSessionResponse)
      : undefined;
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseCreateSessionRequest(): CreateSessionRequest {
  return {};
}

export const CreateSessionRequest: MessageFns<CreateSessionRequest> = {
  encode(_: CreateSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateSessionRequest {
    return {};
  },

  toJSON(_: CreateSessionRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateSessionRequest>, I>>(base?: I): CreateSessionRequest {
    return CreateSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateSessionRequest>, I>>(_: I): CreateSessionRequest {
    const message = createBaseCreateSessionRequest();
    return message;
  },
};

function createBaseJoinSessionRequest(): JoinSessionRequest {
  return { sessionUrl: "" };
}

export const JoinSessionRequest: MessageFns<JoinSessionRequest> = {
  encode(message: JoinSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionUrl !== "") {
      writer.uint32(10).string(message.sessionUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinSessionRequest {
    return { sessionUrl: isSet(object.sessionUrl) ? globalThis.String(object.sessionUrl) : "" };
  },

  toJSON(message: JoinSessionRequest): unknown {
    const obj: any = {};
    if (message.sessionUrl !== "") {
      obj.sessionUrl = message.sessionUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinSessionRequest>, I>>(base?: I): JoinSessionRequest {
    return JoinSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinSessionRequest>, I>>(object: I): JoinSessionRequest {
    const message = createBaseJoinSessionRequest();
    message.sessionUrl = object.sessionUrl ?? "";
    return message;
  },
};

function createBaseCreateSessionResponse(): CreateSessionResponse {
  return { accepted: false, sessionUrl: "" };
}

export const CreateSessionResponse: MessageFns<CreateSessionResponse> = {
  encode(message: CreateSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accepted !== false) {
      writer.uint32(8).bool(message.accepted);
    }
    if (message.sessionUrl !== "") {
      writer.uint32(18).string(message.sessionUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.accepted = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sessionUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSessionResponse {
    return {
      accepted: isSet(object.accepted) ? globalThis.Boolean(object.accepted) : false,
      sessionUrl: isSet(object.sessionUrl) ? globalThis.String(object.sessionUrl) : "",
    };
  },

  toJSON(message: CreateSessionResponse): unknown {
    const obj: any = {};
    if (message.accepted !== false) {
      obj.accepted = message.accepted;
    }
    if (message.sessionUrl !== "") {
      obj.sessionUrl = message.sessionUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateSessionResponse>, I>>(base?: I): CreateSessionResponse {
    return CreateSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateSessionResponse>, I>>(object: I): CreateSessionResponse {
    const message = createBaseCreateSessionResponse();
    message.accepted = object.accepted ?? false;
    message.sessionUrl = object.sessionUrl ?? "";
    return message;
  },
};

function createBaseJoinSessionResponse(): JoinSessionResponse {
  return { accepted: false };
}

export const JoinSessionResponse: MessageFns<JoinSessionResponse> = {
  encode(message: JoinSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accepted !== false) {
      writer.uint32(8).bool(message.accepted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.accepted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinSessionResponse {
    return { accepted: isSet(object.accepted) ? globalThis.Boolean(object.accepted) : false };
  },

  toJSON(message: JoinSessionResponse): unknown {
    const obj: any = {};
    if (message.accepted !== false) {
      obj.accepted = message.accepted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinSessionResponse>, I>>(base?: I): JoinSessionResponse {
    return JoinSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinSessionResponse>, I>>(object: I): JoinSessionResponse {
    const message = createBaseJoinSessionResponse();
    message.accepted = object.accepted ?? false;
    return message;
  },
};

function createBaseParams(): Params {
  return { size: 0, speed: 0, color: "" };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.size !== 0) {
      writer.uint32(8).int32(message.size);
    }
    if (message.speed !== 0) {
      writer.uint32(16).int32(message.speed);
    }
    if (message.color !== "") {
      writer.uint32(26).string(message.color);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.size = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.speed = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.color = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      size: isSet(object.size) ? globalThis.Number(object.size) : 0,
      speed: isSet(object.speed) ? globalThis.Number(object.speed) : 0,
      color: isSet(object.color) ? globalThis.String(object.color) : "",
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.size !== 0) {
      obj.size = Math.round(message.size);
    }
    if (message.speed !== 0) {
      obj.speed = Math.round(message.speed);
    }
    if (message.color !== "") {
      obj.color = message.color;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.size = object.size ?? 0;
    message.speed = object.speed ?? 0;
    message.color = object.color ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
